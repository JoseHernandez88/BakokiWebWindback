@page "/OrdenarLibroDeCajas"
@inject Blazored.LocalStorage.ILocalStorageService LocalStore

@inject NavigationManager NavigationManager 
@inject HttpClient Http
@using BakokiWeb.Shared

<PageTitle>Request Checkbook</PageTitle>

<style>
    body {
        background-image: url("../Assets/yunqueBlur.png");
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-size: cover;
    }

    .box {
        width: 30%;
        height: 60%;
    }

    .registreBox {
        background-color: #cbd3d4;
        border-radius: 7%;
        position: absolute;
    }

    .loginboxPos {
        margin-left: 35%;
        margin-top: 5%;
    }

    h1 {
        color: #949259;
        text-align: center;
        margin-bottom: 10%;
    }

    .TextBox {
        width: 80%; /* Increase width for better centering */
        height: 5%;
        background-color: transparent;
        border-width: 0;
        border-bottom-width: thin;
        font-size: 20px;
        font-family: "Times New Roman", Times, serif;
        margin-bottom: 10px; /* Add margin for spacing between fields */
    }

    .text {
        text-align: center;
        margin-bottom: 10%;
    }

    .buttonC {
        border: none;
        color: #949259;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        cursor: pointer;
        background-color: white;
        border-radius: 10%;
        font-family: "Times New Roman", Times, serif;
    }
</style>

<body>
    <div class="loginboxPos">
        <div class="box registreBox">
            <h1>Request Checkbook</h1>

            <form method="post" class="parent text">
                <div class="textBoxPos child">
                    <input @bind="numeroCuenta" type="text" placeholder="Número de cuenta" class="TextBox" name="NumeroCuenta" />
                </div>

                <div class="textBoxPos child">
                    <input @bind="razon" type="text" placeholder="Razón" class="TextBox" name="Razon" />
                </div>
            </form>

            <div class="text">
                <button @onclick="RequestCheckbook" class="buttonC">Request Checkbook</button>
                <p>@notice</p>
            </div>

        </div>
    </div>
</body>

@code {

    [Parameter]
    public string? numeroCuenta { get; set; } = "";
    public string? razon { get; set; } = "";
    private string notice = "";
    public Cliente? cli = new();
    public List<Cuenta> cuentas = new();
    public Cuenta cuenta = new();

    protected override async Task OnInitializedAsync()
    {


        var email = await LocalStore.GetItemAsStringAsync("email");
        var list = await Http.GetFromJsonAsync<List<Cuenta>>($"api/Cuenta/get/{email}");
        var result= await Http.GetFromJsonAsync<List<Cliente>>($"api/Cliente/{email}");
        if (list is not null){
            cuentas = list;
        }
        if( result is not null)
        {
            cli = result.FirstOrDefault();
        }
    }

    private async void RequestCheckbook()
    {


        // Perform validation and submit the request
        if (cuentas!= null && numeroCuenta != null && razon != null)
        {
            var results = await Http.GetFromJsonAsync<List<Cuenta>>($"api/Cuenta/{numeroCuenta}");


            if (results != null)
            {
                if (results.Any())
                {
                    var temp = results.FirstOrDefault();
                    if(temp is not null)
                    {
                        cuenta = temp;
                    }
                }
            }
            if (cuentas.Count > 0)
            {
                Console.WriteLine($"{cuentas[0].AccountNumber}");
            }
            else
            {
                Console.WriteLine("cuentas not found");
            }
            foreach(Cuenta acc in cuentas)
            {
                Console.WriteLine($"Cliente:{acc.AccountName}");

                if (cli is not null && cuenta is not null && acc.AccountNumber==cuenta.AccountNumber)
                {

                    var orderBody = "Hi,\n" +
                         $"Client {cli.FirstName} {cli.LastName}, {cli.Email}.\n" +
                         $"wishes to order a new check book for their {cuenta.AccountName} account " +
                         $"with account number {cuenta.AccountNumber}. For the following reason: " +
                         $"{razon}. Please mail the book to: \n" +
                         $"{cli.FirstName} {cli.LastName}\n" +
                         $"{cli.AddressLine1}\n" +
                         $"{cli.AddressLine2}\n" +
                         $"And contat them to {cli.PhoneNumber} in case of any isssues." +
                         $"Best Wishes,\n" +
                         $"Your banking app alway Bankoki." +
                         "Read more about it on https://www.gemboxsoftware.com/email";

                    var result = await Http.PostAsJsonAsync<string>("/api/OrderBook ", orderBody);
                    NavigationManager.NavigateTo("/MainPage");

                } 
            }
            notice = "The account number does not match any of your accounts.";
          
        }
        else
        {
            notice = "Please fill in all required fields.";
        }
    }

}
