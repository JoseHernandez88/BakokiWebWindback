@page "/Transfer"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStore
@using BakokiWeb.Shared

<PageTitle>Transfer</PageTitle>

<div class="container ">

    <h1 class="text-center">TRANSFERIR ENTRE CUENTAS</h1>

    <div class="row">

        <div class="d-flex justify-content-around">
            <h3 class="p-2 d-flex align-self-center text-secondary">Desde cuenta</h3>
            <h3 class="p-2 d-flex align-self-center text-secondary">Hacia cuenta</h3>
        </div>

        <div>

            <div class="d-flex justify-content-around">

                <div class="d-flex flex-column text-center">

                    <img src="Images/ElegirCuenta.png" style="width:300px; height:300px; margin:15px;" class="rounded" />


                    @{ var account1 = new List<Cuenta>(); }

                    @{var counter1 = 0; }

                    <Dropdown TItem="Cuenta" OnSelected="@OnSelected">
                        <InitialTip>Escoja la cuenta de la cual quiere transferir</InitialTip>
                        <ChildContent>
                            @foreach (var cuenta in cuentas)
                            {

                                account1.Add(@cuenta);

                                <DropdownListItem Item="@account1[counter1]"> @cuenta.AccountName </DropdownListItem>

                                counter1++;
                            }

                        </ChildContent>
                    </Dropdown>

                </div>


                <h1 class="d-flex align-self-center text-secondary"><span class="oi oi-transfer" aria-hidden="true"></span></h1>

                <div class="d-flex flex-column text-center">

                    <img src="Images/ElegirCuenta.png" style="width:300px; height:300px; margin:15px;" class="rounded" />


                    @{ var account2 = new List<Cuenta>(); }

                    @{var counter2 = 0; }

                    @if (accounts.Count % 2 != 0)
                    {

                        <Dropdown TItem="Cuenta" OnSelected="@OnSelected">
                            <InitialTip>Escoja la cuenta a la que quiere transferir</InitialTip>


                            <ChildContent>

                                @foreach (var cuenta in cuentas)
                                {

                                    account2.Add(@cuenta);

                                    <DropdownListItem Item="@account2[counter2]"> @cuenta.AccountName </DropdownListItem>

                                    counter2++;

                                }

                            </ChildContent>


                        </Dropdown>
                    }


                </div>

            </div>


        </div>

        <div class="d-flex flex-column text-center p-5">
            @if (accounts.Count % 2 == 0 && accounts.Count != 0)
            {

                <label>
                    Entre la cantidad que desea transferir a la cuenta <span style= "font-weight:bolder;">@accounts.Last().AccountName</span> :
                    <input type="number" placeholder="1.00" step="0.01" asp-for="Cantidad" />
                    <input type="submit" @onclick="TransferMoney" />
                </label>


            }
        </div>


    </div>

</div>

@code{

    [Parameter]
    public int Cantidad { get; set; }

    //[Parameter]

    //public string? email { get; set; }


    //public List<Cuenta> cuentas = new List<Cuenta>();
    //public Cliente? cli = new();

    List<Cuenta> cuentas = new List<Cuenta>();


    protected override async Task OnInitializedAsync()
    {
        var email = await LocalStore.GetItemAsStringAsync("email");
        var results = await Http.GetFromJsonAsync<List<Cuenta>>($"api/Cuenta/get/{email}");
        @if (results != null)
        {
            cuentas = results;
        }
    }
    /*
    protected override async Task OnInitializedAsync()
    {
        List<Cliente> list = new();
        Cliente? cli = new();
        var result = await Http.GetFromJsonAsync<List<Cliente>>($"api/Client/{email}");
        if (result is not null)
        {
            list = result.ToList();
            if (list.Any())
            {
                cli = list.FirstOrDefault();
            }
        }



    }*/

    List<Cuenta> accounts = new List<Cuenta>();

    public void OnSelected(Cuenta selection)
    {
        Console.WriteLine(selection.AccountName);
        accounts.Add(selection);

    }

    public void TransferMoney()
    {
        Console.WriteLine("llegamos");
        //hay que llamar una funcion que tenga como parametros las ultimas dos en la lista de accounts. usando cantidad
    }



}