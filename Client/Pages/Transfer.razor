@page "/Transfer"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStore
@using BakokiWeb.Shared
@using System.Text.RegularExpressions;

<PageTitle>Transfer</PageTitle>

@if (cuentas.Count <= 0)
{
    <span> Ninguna cuenta asociada encontrada...</span>
}

<div class="container ">

    <h1 class="text-center">TRANSFERIR ENTRE CUENTAS</h1>

    <div class="row">

        <div class="d-flex justify-content-around">
            <h3 class="p-2 d-flex align-self-center text-secondary">Desde cuenta</h3>
            <h3 class="p-2 d-flex align-self-center text-secondary">Hacia cuenta</h3>
        </div>

        <div>

            <div class="d-flex justify-content-around">

                <div class="d-flex flex-column text-center">

                    <img src="Images/ElegirCuenta.png" style="width:300px; height:300px; margin:15px;" class="rounded" />


                    @{ var account1 = new List<CuentaViewModel>(); }

                    @{var counter1 = 0; }

                    <Dropdown TItem="CuentaViewModel" OnSelected="@OnSelected">
                        <InitialTip>Escoja la cuenta de la cual quiere transferir</InitialTip>
                        <ChildContent>
                            @foreach (var cuenta in cuentas)
                            {

                                account1.Add(@cuenta);

                                <DropdownListItem Item="@account1[counter1]"> @cuenta.AccountName </DropdownListItem>

                                counter1++;
                            }

                        </ChildContent>
                    </Dropdown>

                </div>


                <h1 class="d-flex align-self-center text-secondary"><span class="oi oi-transfer" aria-hidden="true"></span></h1>

                <div class="d-flex flex-column text-center">

                    <img src="Images/ElegirCuenta.png" style="width:300px; height:300px; margin:15px;" class="rounded" />


                    @{ var account2 = new List<CuentaViewModel>(); }

                    @{var counter2 = 0; }

                    @if (accounts.Count % 2 != 0)
                    {

                        <Dropdown TItem="CuentaViewModel" OnSelected="@OnSelected">
                            <InitialTip>Escoja la cuenta a la que quiere transferir</InitialTip>


                            <ChildContent>

                                @foreach (var cuenta in cuentas)
                                {

                                    account2.Add(@cuenta);

                                    <DropdownListItem Item="@account2[counter2]"> @cuenta.AccountName </DropdownListItem>

                                    counter2++;

                                }

                            </ChildContent>


                        </Dropdown>
                    }


                </div>

            </div>


        </div> 

        <div class="d-flex flex-column text-center p-5">
            @if (accounts.Count % 2 == 0 && accounts.Count != 0)
            {
                <form>
                    <label>Entre la cantidad que desea transferir a la cuenta <span style="font-weight:bolder;">@accounts.Last().AccountName</span> :</label>
                    <div>
                        <input @bind="Cantidad" type="text" placeholder="100.00" name="Cantidad" pattern="^[0-9]{0,6}\.[0-9][0-9]" />
                    </div>
                    <input type="submit" @onclick="TransferMoney" />
                    
                </form>
            }
            <p>@notice</p>
        </div>


    </div>

</div>

@code{

    [Parameter]
    public string Cantidad { get; set; } = "";

    private string notice = "La cantidad debe ser menos de $999,999.99 y con el formato de DDDD.CC";


    List<CuentaViewModel> cuentas = new List<CuentaViewModel>();


    protected override async Task OnInitializedAsync()
    {
        var email = await LocalStore.GetItemAsStringAsync("email");
        var results = await Http.GetFromJsonAsync<List<CuentaViewModel>>($"api/Cuenta/get/{email}");
        @if (results != null)
        {
            cuentas = results;
        }
    }



    List<CuentaViewModel> accounts = new List<CuentaViewModel>();

    public void OnSelected(CuentaViewModel selection)
    {
        accounts.Add(selection);

        @if (accounts.Count > 2)
        {
            accounts.RemoveAt(0);
            accounts.RemoveAt(0);
        }

    }

    async Task TransferMoney()
    {

        Match match = Regex.Match(Cantidad, @"^[0-9]{0,6}\.[0-9][0-9]");

        Cantidad = Cantidad.Replace(".", "");

        if (match.Success && double.Parse(Cantidad) /100 <= new Cuenta(accounts[0]).Balance())
        {
            NavigationManager.NavigateTo("/Cuenta");
            var result = await Http.PutAsJsonAsync<CuentaViewModel>($"api/Cuenta/put/transfer/{accounts.Last().AccountNumber}/{Cantidad}", accounts[0]);
        }
        else if(!match.Success)
        {
            notice = "La cantidad debe ser menos de $999,999.99 y con el formato de DDDD.CC";
        }
        else
        {
            notice = $"La cuenta {accounts[0].AccountName} no tiene los fondos suficientes para esta transacción" ;
        }

    }

}