@page "/Cuenta"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStore
@using BakokiWeb.Shared


@if (cuentas.Count <= 0)
{
    <span> Ninguna cuenta asociada encontrada...</span>
}
else
{

    @foreach (Cuenta cuenta in cuentas)
    {
        cuentaGlobal = cuenta;
        if (cuenta.IsOpen)
        {


            <div style="background-color: #78774890; height: 150px;" class="container rounded-pill mb-4">



                <div class="d-flex justify-content-between">

                    <div class="d-flex">

                        <div class="p-2">


                            <img src="Images/CreditcardPlaceholder.png" style="width:100px; height:100px; margin:15px;" class="rounded float-left">

                        </div>

                        <div class="p-2 d-flex align-self-center">

                            <div class="col d-flex flex-column">


                                <div class="Tipo-de-Cuenta float-left">

                                    <h2>
                                        @cuenta.AccountName
                                    </h2>

                                </div>

                                <div class="Numero-de-cuenta float-left">

                                    <h2>
                                        @cuenta.AccountNumber
                                    </h2>

                                </div>


                            </div>

                        </div>

                    </div>

                    <div class="balance-actual ml-auto p-2 d-flex align-self-center justify-content-center">


                        <Tooltip Text="Presione aquí para poder ver el historial de la cuenta."><button @onclick="ShowHistory" class="btn btn-primary m-2"> Ver historial</button></Tooltip>

                        @if (@cuenta.Balance() == 0)
                        {
                                            <Tooltip Text="Presione aquí para dar debaja su cuenta."><button style="background-color: red;" @onclick="() => 
                 DeleteAccount(cuenta)">@cuenta class="btn btn-primary m-2"> Borrar la cuenta</button></Tooltip>
                        }

                        <h3 class="m-2"> $@cuenta.Balance() </h3>

                    </div>


                </div>

            </div>
        }

    }

}


@code {
    List<Cuenta> cuentas = new List<Cuenta>();
    Cuenta cuentaGlobal = new Cuenta();
    String email = "";

    void ShowHistory()
    {
        NavigationManager.NavigateTo("/MostrarHistorial");
    }

    async Task DeleteAccount(Cuenta cuenta)
    {
        
        await Http.PutAsJsonAsync<Cuenta>($"put/{cuenta.AccountNumber}/{email}",cuenta);
    }

    protected override async Task OnInitializedAsync()
    {
        email = await LocalStore.GetItemAsStringAsync("email");
        var results = await Http.GetFromJsonAsync<List<CuentaViewModel>>($"api/Cuenta/get/{email}");
        @if (results != null)
        {
            foreach( var cue in results)
            {
                cuentas.Add(new Cuenta(cue));
            }
        }
    }


}

